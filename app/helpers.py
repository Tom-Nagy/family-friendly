"""
Classes build to perform CRUD operation
"""

from app import mongo
from flask import Flask
from bson.objectid import ObjectId
from werkzeug.security import generate_password_hash

# Collections:
users_coll = mongo.db.users
events_coll = mongo.db.events
tips_coll = mongo.db.tips
contacts_coll = mongo.db.contacts
questions_coll = mongo.db.questions
answers_coll = mongo.db.answers


class User:

    """
    Class that Creates an instance of a user,
    Prepares the data for the database and
    Inserts the data in the users collection.
    """

    def __init__(self, username, email, password, _id=None, first_name=None,
                last_name=None, profile_picture=None, events_liked=None,
                questions_liked=None, answers_liked=None, contacts_liked=None,
                tips_liked=None, events_created=None, questions_created=None,
                answers_created=None, contacts_created=None, tips_created=None):
                """
                Initialisation of User, setting attributes value to None 
                as placeholder for future input.
                """
                self._id = _id
                self.username = username
                self.email = email
                self.password = generate_password_hash(password)
                self.first_name = first_name if not None else 'null'
                self.last_name = last_name if not None else 'null'
                self.profile_picture = profile_picture if not None else 'null'
                self.events_liked = events_liked if not None else ['null']
                self.questions_liked = questions_liked if not None else ['null']
                self.answers_liked = answers_liked if not None else ['null']
                self.contacts_liked = contacts_liked if not None else ['null']
                self.tips_liked = tips_liked if not None else ['null']
                self.events_created = events_created if not None else ['null']
                self.questions_created = questions_created if not None else ['null']
                self.answers_created = answers_created if not None else ['null']
                self.contacts_created = contacts_created if not None else ['null']
                self.tips_created = tips_created if not None else ['null']

    def user_info_to_dic(self):
        """
        Format User attributes to a dictionary in order to prepare data
        to be inserted to the database.
        """
        user_info = {
            'username': self.username,
            'email': self.email,
            'password': self.password,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'profile_picture': self.profile_picture,
            'events_liked': self.events_liked,
            'questions_liked': self.questions_liked,
            'answers_liked': self.answers_liked,
            'contacts_liked': self.contacts_liked,
            'tips_liked': self.tips_liked,
            'events_created': self.events_created,
            'questions_created': self.questions_created,
            'answers_created': self.answers_created,
            'contacts_created': self.contacts_created,
            'tips_created': self.tips_created,
        }
        return user_info

    def insert_user_to_db(self):
        """
        Use user_info dic generated by user_info_to_dic()
        as data to insert into the db.
        """
        users_coll.insert_one(self.user_info_to_dic())