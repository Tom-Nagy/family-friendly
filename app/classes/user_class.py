"""
Classes build to perform CRUD operation
"""

from app import mongo
from flask import Flask, request
from bson.objectid import ObjectId
from werkzeug.security import generate_password_hash

# Collections:
users_coll = mongo.db.users
events_coll = mongo.db.events
tips_coll = mongo.db.tips
contacts_coll = mongo.db.contacts
questions_coll = mongo.db.questions
answers_coll = mongo.db.answers


class User:

    """
    Class that Creates an instance of a user,
    Prepares the data for the database and
    Inserts the data in the users collection.
    """

    # Create a User object
    def __init__(self, first_name, last_name, username, email, password,
                conf_password, _id=None, profile_picture=None,
                events_liked=None, questions_liked=None, answers_liked=None,
                contacts_liked=None, tips_liked=None, events_created=None,
                questions_created=None, answers_created=None,
                contacts_created=None, tips_created=None):
                """
                Initialisation of User, setting attributes value to None 
                as placeholder for future input.
                """
                self.first_name = first_name
                self.last_name = last_name
                self._id = _id
                self.username = username
                self.email = email
                self.password = generate_password_hash(password)
                self.conf_password = generate_password_hash(conf_password)
                self.profile_picture = profile_picture if not None else 'null'
                self.events_liked = events_liked if not None else ['null']
                self.questions_liked = questions_liked if not None else ['null']
                self.answers_liked = answers_liked if not None else ['null']
                self.contacts_liked = contacts_liked if not None else ['null']
                self.tips_liked = tips_liked if not None else ['null']
                self.events_created = events_created if not None else ['null']
                self.questions_created = questions_created if not None else ['null']
                self.answers_created = answers_created if not None else ['null']
                self.contacts_created = contacts_created if not None else ['null']
                self.tips_created = tips_created if not None else ['null']

    # method used as a formatter   
    def user_info_to_dic(self):
        """
        Format User attributes to a dictionary in order to prepare data
        to be inserted to the database.
        """
        user_info = {
            'username': self.username,
            'email': self.email,
            'password': self.password,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'profile_picture': self.profile_picture,
            'events_liked': self.events_liked,
            'questions_liked': self.questions_liked,
            'answers_liked': self.answers_liked,
            'contacts_liked': self.contacts_liked,
            'tips_liked': self.tips_liked,
            'events_created': self.events_created,
            'questions_created': self.questions_created,
            'answers_created': self.answers_created,
            'contacts_created': self.contacts_created,
            'tips_created': self.tips_created,
        }
        return user_info

    # Add User to the database
    def insert_user_to_db(self):
        """
        Use user_info dic generated by user_info_to_dic()
        as data to insert into the db.
        """
        try:
            users_coll.insert_one(self.user_info_to_dic())
        except Exception as e:
            print(e)

    # Update User info
    def update_user(self, user_id):
        """
        Get updated user info with form fields, => for the user.py
        Create a new User instance and Update the db using the user _id 
        """
        users_coll.update_one({'_id': ObjectId(user_id)},
                              {'$set': self.user_info_to_dic()})
    
    # method that can be used without instantiating the class,
    # but relevant tot the class.
    @staticmethod
    def delete_user(user_id):
        """
        Delete a user from the db using the user_id
        """
        users_coll.delete_one({'_id': ObjectId(user_id)})

    @staticmethod
    def check_if_username_exists(username):
        """
        Verify if the username already exists
        """
        users_coll.find_one({'username': username})

    @staticmethod
    def check_if_email_exists(email):
        """
        Verify if the email already exists
        """
        users_coll.find_one({'email': email})

    # method that utilise the whole class,
    # can be use on the class without the object instantiated to begin with.
    @classmethod
    def get_one_user(cls, user_id):
        """
        Get a user from the db with its user_id,
        Return an instance of User
        """
        user = users_coll.find_one({'_id': ObjectId(user_id)})
        return cls(**user)
